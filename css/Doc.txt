DAY_1 (OBJECTIVE)
ðŸŽ¯WHAT IS CSS ?
ðŸŽ¯WHY CSS ?
ðŸŽ¯FEATURES OF CSS 
ðŸŽ¯WHAT IS SELECTOR
ðŸŽ¯DIFFERENT WAYS TO LINK CSS TO HTML 


CSS: CASCADING STYLE SHEET 
CASCADING :set of rules applied to an html Elements  
     casecade: (it helps browser decide what kind properties to apply to element when properties are applied to same element )
css is used for applying the styles or controls the layout, colors, fonts, and overall visual appearance of web pages.

WHY CSS ?
- Separates content (HTML) from presentation (CSS)
- Makes web pages visually attractive and user-friendly
- Enables responsive design for different devices
- Allows reusability and maintainability of styles
- Reduces code duplication

ðŸŽ¯ CURRENT VERSION OF CSS
- Standard Version: CSS3 (with ongoing updates and new modules)


ðŸŽ¯FEATURES 
1. Flexbox and Grid System (for layouts(weblayouts), dashboards, image galleries, cards)
2. Animations (keyframes, transitions)
3. Transitions and Transformations (rotate, scale, skew, etc.)
4. Advanced Selectors (Pseudo-classes and Pseudo-elements)
5. Responsive Web Design (RWD) using Media Queries
6. CSS Variables (custom properties)
7. Counters, color schemes, enhanced background properties
8. Gradients: linear-gradient, conic-gradient, radial-gradient
9. Box shadows, text shadows
10. Custom fonts using @font-face
11. CSS Functions (calc(), var(), clamp(), etc.)
12. CSS Units (px, em, rem, %, vw, vh, etc.)
13. Layering with z-index
14. CSS specificity and inheritance
        9.box-shadows etc...


ðŸŽ¯ WHAT IS A SELECTOR?
A selector is a pattern used to select the HTML elements you want to style.


ðŸŽ¯SELECTOR : something that selects or chooses  an element 
    Example:
    <h1 id="main-heading" class="title" data-target="heading">Hello</h1>
    - h1: Element selector (selects all <h1> elements)
    - #main-heading: ID selector (selects element with id="main-heading")
    - .title: Class selector (selects elements with class="title")
    - [data-target="heading"]: Attribute selector (selects elements with data-target="heading")

TYPES OF SELECTORS

1. SIMPLE SELECTORS
   - Type Selector (Element/Tag selector): e.g., h1, p, div
   - ID Selector: e.g., #main-heading
   - Class Selector: e.g., .title
   - Group Selector: e.g., h1, p, .title
   - Universal Selector: e.g., *

2. COMBINATOR SELECTORS (Describe the relationship between selectors)
   - Child Selector (>): Selects direct children. Example: div > p
   - Descendant Selector (space): Selects all descendants. Example: div p
   - General Sibling Selector (~): Selects all siblings. Example: h1 ~ p
   - Adjacent Sibling Selector (+): Selects the next sibling. Example: h1 + p

3. PSEUDO-ELEMENT SELECTORS
   - ::first-letter, ::first-line, ::before, ::after, ::placeholder, ::marker, ::selection, etc.

4. PSEUDO-CLASS SELECTORS
   - :first-child, :last-child, :nth-child(), :focus, :required, :max-length, :read-only, :disabled, :checked, :hover, :active, :visited, :not(), etc.

5. ATTRIBUTE SELECTORS
   - [attribute], [attribute="value"], [attribute^="value"], [attribute$="value"], [attribute*="value"], etc.

ðŸŽ¯ CSS SYNTAX
A CSS rule-set consists of a selector and a declaration block:
    selector {
      property: value;
      property2: value2;
    }

ðŸŽ¯ CASCADE, INHERITANCE, AND SPECIFICITY
- Cascade: Determines which CSS rule applies when multiple rules target the same element.
- Inheritance: Some CSS properties are inherited from parent to child elements (e.g., color, font-family).
- Specificity: Determines which selector has higher priority.

ðŸŽ¯ COMMENTS IN CSS
    /* This is a comment */

ðŸŽ¯ DIFFERENT WAYS TO ADD CSS TO HTML

1. Inline CSS
   - Example: <h1 style="color: red; text-align: center;">Hello</h1>
     - style: Attribute
     - color, text-align: Properties/Keys
     - red, center: Values

Example :
      <h1 style="color: red;text-transform: lowercase;text-align: center;text-decoration: underline;">HELLO CSS DEV</h1>
     <div style="background-color: lightcyan;border: 2px solid red;width: 100px;border-radius: 10px;padding: 10px;">
        <p style="color:orangered">IPHONE</p>
        <p style="color: green;">RS1000</p>
     </div>
    

2. Internal CSS
   - Example:
     <head>
       <style>
         selector {
           property: value;
         }
       </style>
     </head>

3. External CSS
   - Example:
     <head>
       <link rel="stylesheet" href="./index.css" />
     </head>

ðŸŽ¯ BEST PRACTICES
- Use external CSS for large projects for better maintainability.
- Use class selectors for reusable styles.
- Avoid using too many inline styles.
- Use semantic HTML for better accessibility and SEO.
- Organize CSS with comments and logical grouping.



DAY_2 OBJECTIVE

ðŸŽ¯ BOX MODEL IN CSS

The CSS Box Model is a fundamental concept that describes how elements are structured and spaced on a web page. Every element is considered as a rectangular box, consisting of the following parts (from inside out):

1. Content: The actual content of the box, such as text, images, or other media.
2. Padding: The space between the content and the border. It creates space inside the box, around the content.
   - Properties: padding-top, padding-right, padding-bottom, padding-left, or shorthand: padding
3. Border: A line that wraps around the padding and content. It can have different styles, widths, and colors.
   - Properties: border-style (solid, dashed, dotted, double, groove, ridge, inset, outset, none)
   - border-width, border-color, border-radius (for rounded corners)
   - Individual sides: border-top, border-right, border-bottom, border-left
   border-style (dotted dashed grooved  double solid riged inset outset non )
         border-top-style 
         border-bottom-style 
         border-left-style 
         border-right-style  
  border-color :
         border-top-color 
         border-bottom-color
         border-left-color
         border-right-color  
   border-width 
         border-top-width 
         border-bottom-width
         border-left-width
         border-right-width 
   border-radius 
       border-top-left-radius
       border-top-right-radius
       border-bottom-right-radius
       border-bottom-left-radius
4. Margin: The space outside the border, separating the element from other elements.
   - Properties: margin-top, margin-right, margin-bottom, margin-left, or shorthand: margin

ðŸ“¦ Box Model Formula:
- Total Width = width + padding-left + padding-right + border-left + border-right + margin-left + margin-right
- Total Height = height + padding-top + padding-bottom + border-top + border-bottom + margin-top + margin-bottom

ðŸŽ¯ Additional Box Model Concepts
- box-sizing: Controls how the total width and height of an element are calculated.
  - content-box (default): width/height includes only the content. Padding and border are added outside.
  - border-box: width/height includes content, padding, and border (recommended for layouts).
- overflow: Controls what happens if content overflows the box (visible, hidden, scroll, auto).


DAY_3 
Position Properties 

CSS positioning allows you to control exactly where elements appear on a web page.


DIFFERENT TYPES OF Position Properties 
2.Position:static (default)  
2.Position:Relative 
 if no element present in the doc it moves from root of doc if any elemnent present it moves realtive to previous element or parent
3.Position:absolute  
it comes out of normal document flow and starts moving from root emlement until and unless its parent is applied with some  position like realtive or absolute 
4.Position:fixed
5.Position:sticky 

To move the elements we use properties like
 top 
 bottom
 left
 right 


Real-World Use Cases
Sticky Navigation Bars
Scrollable Headers
Dropdown Menus
Search Bars with Icons
Overlay Image Galleries


Static Positioning (Default)

Elements are positioned according to the normal document flow.
No special positioning is applied.

example:
div {
  position: static;
}

Relative Positioning

The element stays in the normal flow, but you can move it relative to its original position using top, right, bottom, or left.
Space for the element is still preserved in the layout.
Note: If no other positioned elements are nearby, it moves from the root. If nearby elements are present, it shifts from its expected position.

.box {
  position: relative;
  top: 20px;
  left: 10px;
}

Absolute Positioning

The element is removed from the normal flow and positioned relative to its nearest positioned ancestor (not static).
If no positioned ancestor exists, it is positioned relative to the <html> (viewport).
 If parent isnâ€™t relative/absolute/fixed, it escapes to <html>.
.child {
  position: absolute;
  top: 50px;
  right: 20px;
}

Fixed Positioning

The element is removed from the normal flow and positioned relative to the browser window (viewport).
It stays in the same place even when the page is scrolled.
Commonly used for headers, footers, or floating buttons.
.navbar {
  position: fixed;
  top: 0;
  width: 100%;
}

Sticky Positioning

The element toggles between relative and fixed, depending on the scroll position.
It acts as relative until it reaches a defined offset, then becomes fixed.
Great for sticky headers or sidebars.

z-index: Controls stacking order (which element appears on top).

Day_4
colors
text_properties
FontProperties 
backgrounds

-----------------------------
COLORS IN CSS
-----------------------------
CSS provides multiple ways to specify colors for text, backgrounds, borders, and other elements. Understanding these options helps you create visually appealing and accessible designs.

1. Named Colors
   - Use standard color names like red, blue, green, orange, pink, etc.
   - Example: color: orangered;

2. RGB and RGBA
   - RGB: Uses Red, Green, Blue values (0-255).
     Example: color: rgb(255, 0, 0); // red
   - RGBA: Adds Alpha (opacity, 0-1).
     Example: color: rgba(255, 0, 0, 0.5); // semi-transparent red

3. HEX Colors
   - Uses hexadecimal values (#RRGGBB or #RGB).
   - Example: color: #ff0000; // red

4. HSL and HSLA
   - HSL: Hue (0-360), Saturation (0-100%), Lightness (0-100%).
     Example: color: hsl(120, 100%, 50%); // green
   - HSLA: Adds Alpha (opacity).
     Example: color: hsla(120, 100%, 50%, 0.3);

5. CSS Color Functions (Advanced)
   - color-mix(): Mixes two colors.
     Example: color: color-mix(in srgb, red 60%, blue 40%);
   - color-contrast(): Ensures accessible contrast (browser support limited).

6. Transparency
   - Use rgba(), hsla(), or the opacity property.
   - Example: opacity: 0.7; (applies to the whole element)

Best Practices:
- Use high-contrast color combinations for accessibility.
- Prefer CSS variables for theme consistency.
- Test colors on different devices and backgrounds.

-----------------------------
TEXT PROPERTIES
-----------------------------
CSS text properties control the appearance, alignment, spacing, and decoration of text.

1. color: Sets the text color.
2. text-align: left | right | center | justify
   - Aligns text horizontally within its container.
3. text-transform: none | uppercase | lowercase | capitalize
   - Controls letter casing.
4. text-decoration: underline | overline | line-through | none
   - Adds lines to text (e.g., links).
5. text-shadow: Adds shadow to text.
   - Example: text-shadow: 2px 2px 4px #888;
6. letter-spacing: Adjusts space between letters.
7. word-spacing: Adjusts space between words.
8. line-height: Controls vertical spacing between lines.
9. text-indent: Indents the first line of text.
10. direction: ltr | rtl (left-to-right or right-to-left text)

Example:
.headline {
  color: #333;
  text-align: center;
  text-transform: uppercase;
  text-shadow: 1px 1px 2px #aaa;
}

-----------------------------
FONT PROPERTIES
-----------------------------
Font properties define the typeface, size, style, and weight of text.

1. font-family: Specifies the font(s) to use.
   - Example: font-family: 'Roboto', Arial, sans-serif;
2. font-size: Sets the size of the font (px, em, rem, %, etc.).
   - Example: font-size: 18px;
3. font-weight: normal | bold | 100-900
   - Example: font-weight: 700;
4. font-style: normal | italic | oblique
   - Example: font-style: italic;
5. font-variant: normal | small-caps
   - Example: font-variant: small-caps;
6. font-stretch: normal | condensed | expanded
7. font-feature-settings: Advanced typographic features (ligatures, etc.)
8. @font-face: Import custom fonts.
   - Example:
     @font-face {
       font-family: 'MyFont';
       src: url('myfont.woff2') format('woff2');
     }

Shorthand:
font: style weight size/line-height family;
Example: font: italic bold 16px/1.5 'Roboto', sans-serif;

-----------------------------
BACKGROUND PROPERTIES (with Advanced Features)
-----------------------------
CSS background properties let you control the background color, images, gradients, and advanced effects for elements.

1. background-color
   - Sets the background color.
   - Example: background-color: #f0f0f0;

2. background-image
   - Sets one or more background images (including gradients).
   - Example: background-image: url('bg.jpg');
   - Multiple images: background-image: url('img1.png'), url('img2.png');

3. background-repeat
   - Controls if/how the image repeats (repeat, no-repeat, repeat-x, repeat-y, space, round).
   - Example: background-repeat: no-repeat;

4. background-position
   - Sets the starting position of the background image (left, right, center, top, bottom, or x/y values).
   - Example: background-position: center top;

5. background-size
   - Controls the size of the background image (auto, cover, contain, or specific values).
   - Example: background-size: cover;

6. background-attachment
   - Sets whether the background scrolls with the page (scroll, fixed, local).
   - Example: background-attachment: fixed;

7. background-clip
   - Defines how far the background extends (border-box, padding-box, content-box).
   - Example: background-clip: padding-box;

8. background-origin
   - Sets the positioning area for the background image (border-box, padding-box, content-box).
   - Example: background-origin: content-box;

9. background-blend-mode (Advanced)
   - Blends background layers (images, gradients, colors) using blend modes (multiply, screen, overlay, etc.).
   - Example: background-blend-mode: multiply;

10. background-filter (Advanced, via filter property)
    - Applies effects like blur, brightness, grayscale to backgrounds (using filter: on the element).
    - Example: filter: blur(4px);

11. Gradients (Advanced)
    - linear-gradient: background-image: linear-gradient(to right, #f06, yellow);
    - radial-gradient: background-image: radial-gradient(circle, #f06, yellow);
    - conic-gradient: background-image: conic-gradient(from 90deg, red, yellow, green);

12. Multiple Backgrounds
    - You can layer multiple backgrounds by separating them with commas.
    - Example:
      background-image: url('pattern.png'), linear-gradient(to right, #f06, yellow);
      background-blend-mode: multiply;

13. background (Shorthand)
    - Combines all background properties in one line.
    - Example:
      background: url('bg.jpg') no-repeat center/cover fixed;


-----------------------------
EXAMPLES
-----------------------------
.banner {
  background: linear-gradient(to right, #f06, yellow), url('bg.jpg') no-repeat center/cover;
  background-blend-mode: multiply;
  color: white;
  text-shadow: 1px 1px 4px #000;
}

.frosted {
  background: url('bg.jpg') center/cover;
  filter: blur(4px);
}

.pattern {
  background-image: url('pattern.png'), linear-gradient(135deg, #f06, yellow);
  background-blend-mode: overlay;
}


DAY_5
FLEX_BOX 

Definition:
Flexbox (Flexible Box Layout) is a CSS layout model for arranging elements in a single dimensionâ€”either as a row or a column. 
It makes it easy to align, distribute, and order space among items, even when their size is unknown or dynamic.

REALTIME USECASES 
Card layouts (service cards, product cards, profile cards)
Navigation bars and footers
Hero sections
Image galleries
Web layouts and dashboards
Form layouts

Key Benefits:
Custom ordering of elements
Vertical and horizontal centering
Responsive design with minimal code

FLEX_BOX PARENT PROPERTIES
display:flex

display: flex; // Enables flexbox on the container
flex-direction: row (default) | row-reverse | column | column-reverse
flex-wrap: wrap | nowrap (default)
flex-flow: flex-direction flex-wrap (shorthand)
justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly
(Aligns items along the main axis)
align-items: flex-start | flex-end | center | stretch | baseline
(Aligns items along the cross axis)
align-content: flex-start | flex-end | center | space-between | space-around | space-evenly
(Aligns multiple lines; works only with flex-wrap: wrap)

Note:

When flex-direction is row, justify-content works horizontally and align-items works vertically.
When flex-direction is column, justify-content works vertically and align-items works horizontally.

FLEX_BOX Child PROPERTIES

order: Controls the order of items (default is 0)
align-self: Overrides align-items for a single item
flex-grow: Defines how much a flex item will grow relative to the rest
flex-shrink: Defines how much a flex item will shrink if needed
flex-basis: Sets the initial main size of a flex item
flex: flex-grow |flex-shrink |flex-basis (shorthand)


Transitions : 
Transitions allow you to smoothly change property values over a specified duration, usually in response to user actions like hover.

transition-property: The property to animate (e.g., background, all)
transition-duration: How long the transition takes (e.g., 2s)
transition-delay: Wait time before the transition starts
transition-timing-function: The speed curve (linear, ease, ease-in, ease-out, cubic-bezier)
transition: Shorthand for all the above

Note: transitions works only with Pseudo-class  called hover 
     transition moves from Intial state to final state 
     when mouse hovered it moves in forward direction and mouse is left it moves in backword 
     -no intermediate steps
     - it runs only once 
     -- we can only create simple change

example
.button {
  transition: background 0.3s ease;
}
.button:hover {
  background: orange;
}


Animations
Animations allow you to create more complex, multi-step changes that can run automatically or loop infinitely, using @keyframe

-- runs without Hover with help of @keyframes  
-- it has intermediate steps
-- it can infinte no -of times with property called Animation-iteration-count 
- it difficult to use the js & best creating complex changes 


Animation Properties 
animation-name: Name of the keyframes
animation-duration: How long one cycle takes
animation-delay: Wait time before animation starts
animation-timing-function: Speed curve
animation-iteration-count: Number of times to repeat (infinite for endless)
animation-fill-mode: Defines what styles are applied before/after animation
animation-direction: Direction of animation (normal, reverse, alternate, etc.)


@keyframes slideIn {
  from { transform: translateX(-100%); }
  to { transform: translateX(0); }
}
.box {
  animation-name: slideIn;
  animation-duration: 2s;
  animation-iteration-count: 1;
  animation-fill-mode: forwards;
}


@keyframes name-of Animation {
  0%{

  }20%{
    
  }50%{

  }100%{
    
  }
}


TRANSFORMATIONS
Definition:
CSS Transformations allow you to visually manipulate elements by rotating, scaling, skewing, or translating them in 2D or 3D space without affecting the normal document flow.

Transform Functions:

translate(x, y): Moves the element along the X and/or Y axis.
Example: transform: translate(50px, 20px);
scale(x, y): Scales the elementâ€™s width and/or height.
Example: transform: scale(1.5, 0.5);
rotate(angle): Rotates the element clockwise by a given angle.
Example: transform: rotate(45deg);
skew(x-angle, y-angle): Skews the element along the X and/or Y axis.
Example: transform: skew(20deg, 10deg);
matrix(a, b, c, d, e, f): A combination of all 2D transform functions in one.

3D Transform Functions:
rotateX(angle), rotateY(angle), rotateZ(angle)
scaleZ(z), translateZ(z)
perspective(n): Adds perspective to a 3D transformed element.

Usage Example:
.box {
  transform: rotate(15deg) scale(1.2) translateX(30px);
}

Transform Origin:
The point around which a transformation is applied.
Default is the center of the element.
Example: transform-origin: top left;

Transform Style:
For 3D transforms, use transform-style: preserve-3d; to maintain 3D positioning of child elements.


Real-World Use Cases:
Rotating icons or images on hover
Scaling buttons for interactive effects
Creating flip cards or 3D effects
Animating elements in combination with transitions or keyframes
You can add this section after your Animations notes for a complete CSS effects chapter! Let me know if you want code samples or assignments for practice.


DAY_6
CSS Grid Layout is a powerful 2D layout system for the web. It allows you to design layouts in both rows and columns, making complex and responsive designs easy to build.
REAL-WORLD USE CASES:
- Responsive card layouts (product cards, service cards, profile cards)
- Image galleries that adapt to screen size
- Web page layouts (headers, sidebars, main content, footers)
- Dashboards with flexible widgets or panels
- Forms with multiple columns and rows
- Blog or news feeds in a magazine-style grid
- Calendar and scheduling apps

---

GRID PARENT PROPERTIES

- display: grid;  // Enables grid layout on the container
- grid-template-columns: Defines the number and size of columns. Supports px, rem, %, auto, 1fr, repeat(), minmax().
  Example: grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
- grid-template-rows: Defines the number and size of rows. Supports px, rem, %, auto, 1fr, repeat().
- gap: Shorthand for row and column gaps. Example: gap: 16px;
- grid-row-gap / grid-column-gap: Set row or column gaps individually.
- justify-content: Aligns the entire grid horizontally inside the container. Values: start, end, center, space-between, space-around, space-evenly
- align-content: Aligns the entire grid vertically inside the container. Values: start, end, center, space-between, space-around, space-evenly
- place-content: Shorthand for align-content and justify-content. Example: place-content: center;
- justify-items: Aligns grid items horizontally within their cells. Values: start, end, center, stretch
- align-items: Aligns grid items vertically within their cells. Values: start, end, center, stretch
- place-items: Shorthand for align-items and justify-items. Example: place-items: center start;
- grid-template-areas: Defines named areas for semantic and easy layout.
  Example:
  grid-template-areas:
    "header header"
    "sidebar main"
    "footer footer";

---

GRID CHILD PROPERTIES

- grid-area: Shorthand for grid-row-start, grid-column-start, grid-row-end, grid-column-end or refers to a named area.
- grid-column-start / grid-column-end: Specify where the item starts and ends on the column axis.
- grid-column: Shorthand for grid-column-start / grid-column-end. Example: grid-column: 2 / 4;
- grid-row-start / grid-row-end: Specify where the item starts and ends on the row axis.
- grid-row: Shorthand for grid-row-start / grid-row-end. Example: grid-row: 1 / span 2;
- align-self: Aligns a single grid item vertically within its cell.
- justify-self: Aligns a single grid item horizontally within its cell.
- place-self: Shorthand for align-self and justify-self. Example: place-self: center end;

BEST PRACTICES
- Use auto-fill/auto-fit with minmax() for responsive grids
- Use fr units for flexible, proportional sizing
- Use grid-template-areas for readable, maintainable layouts
- Combine grid with media queries for advanced responsive designs
- Nest grids for complex layouts

---

EXAMPLE

.grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 16px;
}

.card {
  background: lightblue;
  padding: 20px;
  text-align: center;
}

BLOCK vs INLINE-BLOCK vs INLINE ELEMENTS

Definition:
Block elements always start on a new line and take up the full width available (by default). They stack vertically.

Key Points:
You can set width, height, margin, and padding on all sides.
Always starts on a new line.

Common Block Elements:
<div>, <h1>, <p>, <ul>, <li>, <section>, <header>, <footer>

examples:
<div style="background: lightblue;">Block 1</div>
<div style="background: lightgreen;">Block 2</div>

2. Inline Elements
Definition:
Inline elements do not start on a new line. They only take up as much width as necessary and flow within the surrounding text.

Key Points:
Cannot set width or height (itâ€™s ignored).
Margin and padding only affect left/right, not top/bottom.
Does not force a line break.

Common Inline Elements:
<span>, <a>, <strong>, <em>, <img>, <label>
example:
<span style="background: yellow;">Inline 1</span>
<span style="background: orange;">Inline 2</span>


3. Inline-Block Elements
Definition:
Inline-block elements are like inline elements (they sit in a line with other elements), but you can set width and height

Key Points:
Sits inline with other elements (does not force a new line).
You can set width, height, margin, and padding on all sides.
Useful for creating button groups, navigation links, etc.

example:
<span style="display: inline-block; width: 100px; height: 40px; background: pink;">Inline-Block 1</span>
<span style="display: inline-block; width: 100px; height: 40px; background: violet;">Inline-Block 2</span>

1. display: none
Definition:
Completely removes the element from the document flow. The element is not visible, and it does not take up any space on the page.

Example:
.hide {
  display: none;
}

visibility: hidden
Definition:
Hides the element, but it still takes up space in the layout. The element is invisible, but its position and size remain.

.invisible {
  visibility: hidden;
}


RWD:Responsive WEBDESIGN 

Breakpoints:
Breakpoints are customizable widths that determine how your responsive layout behaves across device or viewport sizes 

min:start point 
max:end point 

Extra small	None	<576px :nokia mobile jio mobile watchscreen
Small	(sm)	â‰¥576px : mobiles  
Medium	(md)	â‰¥768px :mobiles tabs 
Large	(lg)	â‰¥992px :tabs laptops,desktops
Extra large	(xl)	â‰¥1200px :desktops,laptops,tv 
Extra extra large	(xxl)	â‰¥1400px : desktops tv projectors etc..


Media Queries
 Conditional CSS rules that apply styles only when certain conditions match:
e.g., screen width, orientation, resolution, user preferences.

SYNTAX: 
@media type (condition) {
  /* CSS rules */
}
eg: @media screen and (min-width: 768px) and (orientation: portrait) { ... }

Use Cases
Responsive layouts (different grids for mobile, tablet, desktop)
Dark mode
High-resolution (Retina) graphics

Types:

screen:- Screen devices (default)
print:-Print styles
all :-	All devices
and	:-Combine conditions
, (comma)	OR :â€“ apply if any condition matches
not	:-Negate a condition
only:-	Prevent older browsers from applying styles

min-width:(start-point)Apply these styles when the screen is bigger than or equal to this width.
max-width:(end-point):Apply these styles when the screen is smaller than or equal to this width.


PSEUDO-ELEMENTS
Definition:
Pseudo-elements are used to style specific parts of an element, such as the first letter, first line, or to insert content before or after an element, without needing extra HTML.
Syntax:
Use a double colon :: (recommended) or a single colon : (for backward compatibility).

syntax:
selector::pseudo-element { /* styles */ }

Common Pseudo-elements:

::first-letter â€” Styles the first letter of a block element.
::first-line â€” Styles the first line of a block element.
::before â€” Inserts content before the elementâ€™s content.
::after â€” Inserts content after the elementâ€™s content.
::selection â€” Styles the portion of text selected by the user.
::placeholder â€” Styles the placeholder text in input fields.
::marker â€” Styles the marker of list items.

Real-World Usage:

Creating drop caps in articles (::first-letter)
Adding icons or symbols before/after buttons or links (::before, ::after)
Customizing selected text color (::selection)
Styling placeholder text in forms (::placeholder)
Styling list bullets or numbers (::marker)

ðŸŽ¯ PSEUDO-CLASSES
Definition:
Pseudo-classes are used to define a special state of an element, such as when it is hovered, focused, the first child, or checked.

Syntax:
Use a single colon :.
selector:pseudo-class { /* styles */ }

Common and Advanced Pseudo-classes:

:hover â€” When the mouse pointer is over the element.
:active â€” When the element is being clicked.
:focus â€” When the element (like an input) is focused.
:visited â€” For links that have been visited.
:first-child â€” When the element is the first child of its parent.
:last-child â€” When the element is the last child of its parent.
:nth-child(n) â€” When the element is the nth child.
:nth-of-type(n) â€” When the element is the nth of its type among siblings.
:first-of-type â€” When the element is the first of its type among siblings.
:last-of-type â€” When the element is the last of its type among siblings.
:only-child â€” When the element is the only child of its parent.
:only-of-type â€” When the element is the only one of its type among siblings.
:empty â€” When the element has no children (including text nodes).
:checked â€” For checked checkboxes or radio buttons.
:disabled â€” For disabled form elements.
:enabled â€” For enabled form elements.
:required â€” For required form fields.
:optional â€” For optional form fields.
:read-only â€” For read-only form fields.
:read-write â€” For editable form fields.
:not(selector) â€” Selects every element that does NOT match the selector.
:root â€” Selects the root element (usually <html>).
:target â€” Selects the element with an id matching the current URL fragment.
:lang(language) â€” Selects elements with a specific language.

Examples:
input:focus { border: 2px solid blue; }
li:nth-child(odd) { background: #f0f0f0; }
input:required { border-left: 4px solid orange; }
div:empty { display: none; }
#section2:target { background: yellow; }

GOLDEN Rule
Pseudo-elements let you style or add to part of an elementâ€™s content.
Pseudo-classes let you style elements based on their state or position.


ATTRIBUTE SELECTORS
-------------------
Definition:
Attribute selectors allow you to select and style HTML elements based on the presence or value of their attributes. They are powerful for targeting elements without needing extra classes or IDs.

Syntax:
selector[attribute] { /* styles */ }
selector[attribute="value"] { /* styles */ }
selector[attribute^="value"] { /* styles */ }
selector[attribute$="value"] { /* styles */ }
selector[attribute*="value"] { /* styles */ }
selector[attribute|="value"] { /* styles */ }
selector[attribute~="value"] { /* styles */ }

Types & Examples:

1. [attribute]
   - Selects elements with the specified attribute, regardless of value.
   - Example: input[required] { border-left: 4px solid orange; }

2. [attribute="value"]
   - Selects elements with the exact attribute value.
   - Example: a[target="_blank"] { color: red; }

3. [attribute^="value"]
   - Selects elements whose attribute value starts with the given value.
   - Example: img[src^="https://"] { border: 2px solid green; }

4. [attribute$="value"]
   - Selects elements whose attribute value ends with the given value.
   - Example: a[href$=".pdf"] { font-weight: bold; }

5. [attribute*="value"]
   - Selects elements whose attribute value contains the given value anywhere.
   - Example: div[class*="card"] { box-shadow: 0 2px 8px #ccc; }

6. [attribute|="value"]
   - Selects elements whose attribute value is exactly "value" or starts with "value-" (useful for language codes).
   - Example: p[lang|="en"] { color: blue; }

7. [attribute~="value"]
   - Selects elements whose attribute value is a space-separated list of words, one of which is exactly "value".
   - Example: [title~="important"] { background: yellow; }

Real-World Use Cases:
- Style all external links: a[target="_blank"]
- Highlight required form fields: input[required]
- Style images from a CDN: img[src^="https://cdn.example.com"]
- Target download links: a[download]
- Style elements with data attributes: [data-role="admin"]


Advanced Example:
/* Style all buttons with a data-action attribute that starts with 'save' */
button[data-action^="save"] {
  background: green;
  color: white;
}

Summary Table:
| Selector                | Matches                                      |
|-------------------------|----------------------------------------------|
| [attr]                  | Has attribute                                |
| [attr="value"]          | Attribute equals value                       |
| [attr^="value"]         | Attribute starts with value                  |
| [attr$="value"]         | Attribute ends with value                    |
| [attr*="value"]         | Attribute contains value                     |
| [attr|="value"]         | Attribute is value or starts with value-     |
| [attr~="value"]         | Attribute contains value as a word           |

Attribute selectors are essential for modern, scalable CSSâ€”especially when working with dynamic content, forms, or data attributes.


