DAY_1 (OBJECTIVE)
ðŸŽ¯WHAT IS CSS ?
ðŸŽ¯WHY CSS ?
ðŸŽ¯FEATURES OF CSS 
ðŸŽ¯WHAT IS SELECTOR
ðŸŽ¯DIFFERENT WAYS TO LINK CSS TO HTML 


CSS: CASCADING STYLE SHEET 
CASCADING :set of rules applied to an html Elements  
     casecade: (it helps browser decide what kind properties to apply to element when properties are applied to same element )
css is used for applying the styles or controls the layout, colors, fonts, and overall visual appearance of web pages.

WHY CSS ?
- Separates content (HTML) from presentation (CSS)
- Makes web pages visually attractive and user-friendly
- Enables responsive design for different devices
- Allows reusability and maintainability of styles
- Reduces code duplication

ðŸŽ¯ CURRENT VERSION OF CSS
- Standard Version: CSS3 (with ongoing updates and new modules)


ðŸŽ¯FEATURES 
1. Flexbox and Grid System (for layouts(weblayouts), dashboards, image galleries, cards)
2. Animations (keyframes, transitions)
3. Transitions and Transformations (rotate, scale, skew, etc.)
4. Advanced Selectors (Pseudo-classes and Pseudo-elements)
5. Responsive Web Design (RWD) using Media Queries
6. CSS Variables (custom properties)
7. Counters, color schemes, enhanced background properties
8. Gradients: linear-gradient, conic-gradient, radial-gradient
9. Box shadows, text shadows
10. Custom fonts using @font-face
11. CSS Functions (calc(), var(), clamp(), etc.)
12. CSS Units (px, em, rem, %, vw, vh, etc.)
13. Layering with z-index
14. CSS specificity and inheritance
        9.box-shadows etc...


ðŸŽ¯ WHAT IS A SELECTOR?
A selector is a pattern used to select the HTML elements you want to style.


ðŸŽ¯SELECTOR : something that selects or chooses  an element 
    Example:
    <h1 id="main-heading" class="title" data-target="heading">Hello</h1>
    - h1: Element selector (selects all <h1> elements)
    - #main-heading: ID selector (selects element with id="main-heading")
    - .title: Class selector (selects elements with class="title")
    - [data-target="heading"]: Attribute selector (selects elements with data-target="heading")

TYPES OF SELECTORS

1. SIMPLE SELECTORS
   - Type Selector (Element/Tag selector): e.g., h1, p, div
   - ID Selector: e.g., #main-heading
   - Class Selector: e.g., .title
   - Group Selector: e.g., h1, p, .title
   - Universal Selector: e.g., *

2. COMBINATOR SELECTORS (Describe the relationship between selectors)
   - Child Selector (>): Selects direct children. Example: div > p
   - Descendant Selector (space): Selects all descendants. Example: div p
   - General Sibling Selector (~): Selects all siblings. Example: h1 ~ p
   - Adjacent Sibling Selector (+): Selects the next sibling. Example: h1 + p

3. PSEUDO-ELEMENT SELECTORS
   - ::first-letter, ::first-line, ::before, ::after, ::placeholder, ::marker, ::selection, etc.

4. PSEUDO-CLASS SELECTORS
   - :first-child, :last-child, :nth-child(), :focus, :required, :max-length, :read-only, :disabled, :checked, :hover, :active, :visited, :not(), etc.

5. ATTRIBUTE SELECTORS
   - [attribute], [attribute="value"], [attribute^="value"], [attribute$="value"], [attribute*="value"], etc.

ðŸŽ¯ CSS SYNTAX
A CSS rule-set consists of a selector and a declaration block:
    selector {
      property: value;
      property2: value2;
    }

ðŸŽ¯ CASCADE, INHERITANCE, AND SPECIFICITY
- Cascade: Determines which CSS rule applies when multiple rules target the same element.
- Inheritance: Some CSS properties are inherited from parent to child elements (e.g., color, font-family).
- Specificity: Determines which selector has higher priority.

ðŸŽ¯ COMMENTS IN CSS
    /* This is a comment */

ðŸŽ¯ DIFFERENT WAYS TO ADD CSS TO HTML

1. Inline CSS
   - Example: <h1 style="color: red; text-align: center;">Hello</h1>
     - style: Attribute
     - color, text-align: Properties/Keys
     - red, center: Values

Example :
      <h1 style="color: red;text-transform: lowercase;text-align: center;text-decoration: underline;">HELLO CSS DEV</h1>
     <div style="background-color: lightcyan;border: 2px solid red;width: 100px;border-radius: 10px;padding: 10px;">
        <p style="color:orangered">IPHONE</p>
        <p style="color: green;">RS1000</p>
     </div>
    

2. Internal CSS
   - Example:
     <head>
       <style>
         selector {
           property: value;
         }
       </style>
     </head>

3. External CSS
   - Example:
     <head>
       <link rel="stylesheet" href="./index.css" />
     </head>

ðŸŽ¯ BEST PRACTICES
- Use external CSS for large projects for better maintainability.
- Use class selectors for reusable styles.
- Avoid using too many inline styles.
- Use semantic HTML for better accessibility and SEO.
- Organize CSS with comments and logical grouping.



DAY_2 OBJECTIVE

ðŸŽ¯ BOX MODEL IN CSS

The CSS Box Model is a fundamental concept that describes how elements are structured and spaced on a web page. Every element is considered as a rectangular box, consisting of the following parts (from inside out):

1. Content: The actual content of the box, such as text, images, or other media.
2. Padding: The space between the content and the border. It creates space inside the box, around the content.
   - Properties: padding-top, padding-right, padding-bottom, padding-left, or shorthand: padding
3. Border: A line that wraps around the padding and content. It can have different styles, widths, and colors.
   - Properties: border-style (solid, dashed, dotted, double, groove, ridge, inset, outset, none)
   - border-width, border-color, border-radius (for rounded corners)
   - Individual sides: border-top, border-right, border-bottom, border-left
   border-style (dotted dashed grooved  double solid riged inset outset non )
         border-top-style 
         border-bottom-style 
         border-left-style 
         border-right-style  
  border-color :
         border-top-color 
         border-bottom-color
         border-left-color
         border-right-color  
   border-width 
         border-top-width 
         border-bottom-width
         border-left-width
         border-right-width 
   border-radius 
       border-top-left-radius
       border-top-right-radius
       border-bottom-right-radius
       border-bottom-left-radius
4. Margin: The space outside the border, separating the element from other elements.
   - Properties: margin-top, margin-right, margin-bottom, margin-left, or shorthand: margin

ðŸ“¦ Box Model Formula:
- Total Width = width + padding-left + padding-right + border-left + border-right + margin-left + margin-right
- Total Height = height + padding-top + padding-bottom + border-top + border-bottom + margin-top + margin-bottom

ðŸŽ¯ Additional Box Model Concepts
- box-sizing: Controls how the total width and height of an element are calculated.
  - content-box (default): width/height includes only the content. Padding and border are added outside.
  - border-box: width/height includes content, padding, and border (recommended for layouts).
- overflow: Controls what happens if content overflows the box (visible, hidden, scroll, auto).


DAY_3 
Position Properties 

CSS positioning allows you to control exactly where elements appear on a web page.


DIFFERENT TYPES OF Position Properties 
2.Position:static (default)  
2.Position:Relative 
 if no element present in the doc it moves from root of doc if any elemnent present it moves realtive to previous element or parent
3.Position:absolute  
it comes out of normal document flow and starts movind from root emlement until and unless its parent is applied with some  position like realtive or absolute 
4.Position:fixed
5.Position:sticky 

To move the elements we use properties like
 top 
 bottom
 left
 right 


Real-World Use Cases
Sticky Navigation Bars
Scrollable Headers
Dropdown Menus
Search Bars with Icons
Overlay Image Galleries


Static Positioning (Default)

Elements are positioned according to the normal document flow.
No special positioning is applied.

example:
div {
  position: static;
}

Relative Positioning

The element stays in the normal flow, but you can move it relative to its original position using top, right, bottom, or left.
Space for the element is still preserved in the layout.
Note: If no other positioned elements are nearby, it moves from the root. If nearby elements are present, it shifts from its expected position.

.box {
  position: relative;
  top: 20px;
  left: 10px;
}

Absolute Positioning

The element is removed from the normal flow and positioned relative to its nearest positioned ancestor (not static).
If no positioned ancestor exists, it is positioned relative to the <html> (viewport).
 If parent isnâ€™t relative/absolute/fixed, it escapes to <html>.
.child {
  position: absolute;
  top: 50px;
  right: 20px;
}

Fixed Positioning

The element is removed from the normal flow and positioned relative to the browser window (viewport).
It stays in the same place even when the page is scrolled.
Commonly used for headers, footers, or floating buttons.
.navbar {
  position: fixed;
  top: 0;
  width: 100%;
}

Sticky Positioning

The element toggles between relative and fixed, depending on the scroll position.
It acts as relative until it reaches a defined offset, then becomes fixed.
Great for sticky headers or sidebars.

z-index: Controls stacking order (which element appears on top).

Day_4
colors
text_properties
FontProperties 


COLORS 
 1.Default Colors :blue orangered ,cgreen ,pink etc... 
 2.RGB
  RGB:RED(0-255) GREEN(0-255)  BLUE(0-255)
  RGBA:RED(0-255) GREEN  BLUE alpha (0-1)
 3.HEX DECIMAL COLORS  (00-ff) (0-9 -a-f(255))
 4.HSL 
    HSL (HUE (0-360deg) SATURATION(0-100%) LIGHTNESS(0-100%))
    HSLA (HUE (0-360deg) SATURATION(0-100%) LIGHTNESS(0-100%)) A-ALPHA(0-1)
 5.LINEAR_GRADIENT COLORS  -- WORKS with only background-image property
 6.conical_GRADIENT COLORS  -- WORKS with only background-image property
 7.RADIAL_GRADIENT COLORS  -- WORKS with only background-image property


DAY_5
FLEX_BOX 

Definition:
Flexbox (Flexible Box Layout) is a CSS layout model for arranging elements in a single dimensionâ€”either as a row or a column. 
It makes it easy to align, distribute, and order space among items, even when their size is unknown or dynamic.

REALTIME USECASES 
Card layouts (service cards, product cards, profile cards)
Navigation bars and footers
Hero sections
Image galleries
Web layouts and dashboards
Form layouts

Key Benefits:
Custom ordering of elements
Vertical and horizontal centering
Responsive design with minimal code

FLEX_BOX PARENT PROPERTIES
display:flex

display: flex; // Enables flexbox on the container
flex-direction: row (default) | row-reverse | column | column-reverse
flex-wrap: wrap | nowrap (default)
flex-flow: flex-direction flex-wrap (shorthand)
justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly
(Aligns items along the main axis)
align-items: flex-start | flex-end | center | stretch | baseline
(Aligns items along the cross axis)
align-content: flex-start | flex-end | center | space-between | space-around | space-evenly
(Aligns multiple lines; works only with flex-wrap: wrap)

Note:

When flex-direction is row, justify-content works horizontally and align-items works vertically.
When flex-direction is column, justify-content works vertically and align-items works horizontally.

FLEX_BOX Child PROPERTIES

order: Controls the order of items (default is 0)
align-self: Overrides align-items for a single item
flex-grow: Defines how much a flex item will grow relative to the rest
flex-shrink: Defines how much a flex item will shrink if needed
flex-basis: Sets the initial main size of a flex item
flex: flex-grow |flex-shrink |flex-basis (shorthand)


Transitions : 
Transitions allow you to smoothly change property values over a specified duration, usually in response to user actions like hover.

transition-property: The property to animate (e.g., background, all)
transition-duration: How long the transition takes (e.g., 2s)
transition-delay: Wait time before the transition starts
transition-timing-function: The speed curve (linear, ease, ease-in, ease-out, cubic-bezier)
transition: Shorthand for all the above

Note: transitions works only with Pseudo-class  called hover 
     transition moves from Intial state to final state 
     when mouse hovered it moves in forward direction and mouse is left it moves in backword 
     -no intermediate steps
     - it runs only once 
     -- we can only create simple change

example
.button {
  transition: background 0.3s ease;
}
.button:hover {
  background: orange;
}


Animations
Animations allow you to create more complex, multi-step changes that can run automatically or loop infinitely, using @keyframe

-- runs without Hover with help of @keyframes  
-- it has intermediate steps
-- it can infinte no -of times with property called Animation-iteration-count 
- it difficult to use the js & best creating complex changes 


Animation Properties 
animation-name: Name of the keyframes
animation-duration: How long one cycle takes
animation-delay: Wait time before animation starts
animation-timing-function: Speed curve
animation-iteration-count: Number of times to repeat (infinite for endless)
animation-fill-mode: Defines what styles are applied before/after animation
animation-direction: Direction of animation (normal, reverse, alternate, etc.)


@keyframes slideIn {
  from { transform: translateX(-100%); }
  to { transform: translateX(0); }
}
.box {
  animation-name: slideIn;
  animation-duration: 2s;
  animation-iteration-count: 1;
  animation-fill-mode: forwards;
}


@keyframes name-of Animation {
  0%{

  }20%{
    
  }50%{

  }100%{
    
  }
}


TRANSFORMATIONS
Definition:
CSS Transformations allow you to visually manipulate elements by rotating, scaling, skewing, or translating them in 2D or 3D space without affecting the normal document flow.

Transform Functions:

translate(x, y): Moves the element along the X and/or Y axis.
Example: transform: translate(50px, 20px);
scale(x, y): Scales the elementâ€™s width and/or height.
Example: transform: scale(1.5, 0.5);
rotate(angle): Rotates the element clockwise by a given angle.
Example: transform: rotate(45deg);
skew(x-angle, y-angle): Skews the element along the X and/or Y axis.
Example: transform: skew(20deg, 10deg);
matrix(a, b, c, d, e, f): A combination of all 2D transform functions in one.

3D Transform Functions:
rotateX(angle), rotateY(angle), rotateZ(angle)
scaleZ(z), translateZ(z)
perspective(n): Adds perspective to a 3D transformed element.

Usage Example:
.box {
  transform: rotate(15deg) scale(1.2) translateX(30px);
}

Transform Origin:
The point around which a transformation is applied.
Default is the center of the element.
Example: transform-origin: top left;

Transform Style:
For 3D transforms, use transform-style: preserve-3d; to maintain 3D positioning of child elements.


Real-World Use Cases:
Rotating icons or images on hover
Scaling buttons for interactive effects
Creating flip cards or 3D effects
Animating elements in combination with transitions or keyframes
You can add this section after your Animations notes for a complete CSS effects chapter! Let me know if you want code samples or assignments for practice.


DAY_6
GRID 

GRID: IS USED FOR DEVELOPING 2D LAYOUTS (U CAN DESIGN A LAYOUT IN BOTH ROW AND COLUMNS)

GRID_PARENT _PROPERTIES 
display:grid 

grid-template-columns : px ,rem ,% ,auto ,1fr ,repeat(2,100px)
grid-template-rows : px ,rem ,% ,auto ,1fr ,repeat(2,100px)
gap:(shorthand property)
grid-column-gap
grid-row-gap
justify-content:start |end |center |space-around | space-between |space-evenly
align-content:start |end |center |space-around | space-between |space-evenly
place-content: justify-content |align-content  --(shorthand)
place-content: center;
    align-content: center;
    justify-content: center;
justify-items:start |center|end|baseline |stretch
align-items:start |center|end|baseline |stretch
place-items:justify-items | align-items
place-items: center start;
    align-items: center;
    justify-items: start;
 
grid-template-areas : 

Child_Properties 
grid-area ---->shorthand for grid-column & grid-row 
grid-column-start 
grid-column-end 
grid-column-------------->shorthand
grid-row-start
grid-row-end
grid-row --------------------->shorthand
align-self 
justify-self 
place-self
